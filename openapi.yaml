---
openapi: 3.0.3
info:
  title: slab-seller-backend API
  version: 1.0.0-SNAPSHOT
paths:
  /api/v1/authentication/token/refresh:
    post:
      tags:
      - Authentication Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequestDTO'
      responses:
        "200":
          description: OK
  /api/v1/authentication/token/request:
    post:
      tags:
      - Authentication Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestDTO'
      responses:
        "200":
          description: OK
  /api/v1/authentication/token/validate:
    post:
      tags:
      - Authentication Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenValidationRequestDTO'
      responses:
        "200":
          description: OK
  /api/v1/email/send:
    post:
      tags:
      - Email Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRecoveryRequestDTO'
      responses:
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "202":
          description: Email sent successfully
  /api/v1/products/availability:
    get:
      tags:
      - Product Resource
      summary: Returns all the available slabs
      description: "Returns a list containing all available slabs (note: for product\
        \ types only fetchProductsType will be faster) The customer client must prove\
        \ it was able to successfully login by validating its token.The header of\
        \ the request must include a parameter \"Authorization\" with the following\
        \ value type: \"Bearer JWT_TOKEN\""
      responses:
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "200":
          description: List of products successfully returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SlabDTO'
  /api/v1/products/type:
    get:
      tags:
      - Product Resource
      summary: Returns a list of all types of slabs
      description: "Fetches all types of slabs (note: does not return availability,\
        \ for that use fetchProductsTypeAndAvailability). The customer client must\
        \ prove it was able to successfully login by validating its token.The header\
        \ of the request must include a parameter \"Authorization\" with the following\
        \ value type: \"Bearer JWT_TOKEN\""
      parameters:
      - name: limit
        in: query
        schema:
          format: int32
          default: 20
          type: integer
      - name: offset
        in: query
        schema:
          format: int32
          default: 0
          type: integer
      responses:
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "200":
          description: List of products successfully returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SlabDTO'
  /api/v1/user/create:
    post:
      tags:
      - User Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationRequestDTO'
      responses:
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "201":
          description: User created successfully
  /api/v1/user/update/info:
    put:
      tags:
      - User Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoUpdateRequestDTO'
      responses:
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "204":
          description: User info successfully updated
  /api/v1/user/update/password:
    put:
      tags:
      - User Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordUpdateRequestDTO'
      responses:
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "204":
          description: User password successfully updated
components:
  schemas:
    AuthenticationRequestDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PasswordRecoveryRequestDTO:
      type: object
      properties:
        email:
          type: string
    SlabDTO:
      type: object
      properties:
        id:
          type: string
        collection:
          type: string
        color:
          type: string
        tone:
          type: string
        width:
          format: int32
          type: integer
        height:
          format: int32
          type: integer
        priceId:
          type: integer
        imagePath:
          type: string
    TokenRefreshRequestDTO:
      type: object
      properties:
        refreshToken:
          type: string
    TokenValidationRequestDTO:
      type: object
      properties:
        token:
          type: string
    UserCreationRequestDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    UserInfoUpdateRequestDTO:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        token:
          type: string
    UserPasswordUpdateRequestDTO:
      type: object
      properties:
        username:
          type: string
        newPassword:
          type: string
        oldPassword:
          type: string
